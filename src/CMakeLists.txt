cmake_minimum_required (VERSION 2.6)
project (propagation)
enable_language (Fortran)

# FFLAGS depend on the compiler
get_filename_component (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

if (Fortran_COMPILER_NAME MATCHES "gfortran.*")
  # gfortran
  set (CMAKE_Fortran_FLAGS_RELEASE "-ffixed-line-length-200 -fno-f2c -O2")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-ffixed-line-length-200 -fno-f2c -O0 -g")
elseif (Fortran_COMPILER_NAME MATCHES "ifort.*")
  # ifort (untested)
  set (CMAKE_Fortran_FLAGS_RELEASE "-f77rtl -O2")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-f77rtl -O0 -g")
elseif (Fortran_COMPILER_NAME MATCHES "g77")
  # g77
  set (CMAKE_Fortran_FLAGS_RELEASE "-fno-f2c -O2")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-fno-f2c -O0 -g")
else (Fortran_COMPILER_NAME MATCHES "gfortran.*")
  message ("CMAKE_Fortran_COMPILER full path: " ${CMAKE_Fortran_COMPILER})
  message ("Fortran compiler: " ${Fortran_COMPILER_NAME})
  message ("No optimized Fortran compiler flags are known, we just try -O2...")
  set (CMAKE_Fortran_FLAGS_RELEASE "-O2")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-O0 -g")
endif (Fortran_COMPILER_NAME MATCHES "gfortran.*")


add_definitions(-DUSE_GSL)
include_directories(3rd-party/include)
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D_DEBUG -O0")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG -O0")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall -O2")
set(CMAKE_PREFIX_PATH "3rd-party")

FIND_LIBRARY(C_LIBRARY c)
#FIND_LIBRARY(FORTRAN_LIBRARY gfortran)
FIND_LIBRARY(XERCES_LIBRARY xerces-c)
FIND_LIBRARY(GSL_LIBRARY gsl)
FIND_LIBRARY(GSLCBLAS_LIBRARY gslcblas)

# add the command to generate the version info file
add_custom_command (
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_autogeneratedVersionInfo.h ${CMAKE_CURRENT_BINARY_DIR}/_autogeneratedDif.c ${CMAKE_CURRENT_BINARY_DIR}/_autogeneratedGitInfo.c
  COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/PrintInfo.sh ${CMAKE_CURRENT_SOURCE_DIR}
  DEPENDS ResourceCompile
  )

# add the command to generate enableFortran.h
add_custom_command (
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/enableFortran.h ${CMAKE_CURRENT_BINARY_DIR}/configFortran.h
  COMMAND echo >${CMAKE_CURRENT_BINARY_DIR}/configFortran.h
  )
 
# add the command to generate disableFortran.h
add_custom_command (
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/disableFortran.h ${CMAKE_CURRENT_BINARY_DIR}/configFortran.h
  COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/nof.h ${CMAKE_CURRENT_BINARY_DIR}/configFortran.h
  )

# add the binary tree directory to the search path for 
# include files
include_directories( ${CMAKE_CURRENT_BINARY_DIR} )

add_executable(ResourceCompile base64.cpp ResourceCompile.cpp)
add_executable(Xmax EXCLUDE_FROM_ALL ${CMAKE_CURRENT_BINARY_DIR}/_autogeneratedVersionInfo.h Xmax.cpp Log.cpp Addfunc.cpp FilePreprocessor.cpp FilePtr.cpp TableFunc.cpp TableReader.cpp Vector.cpp base64.cpp Resource.cpp VersionInfo.cpp)

set(F_SOURCE_FILES
    ${CMAKE_CURRENT_BINARY_DIR}/enableFortran.h
    pp/frag.f
    pp/pp.f95 Stecker16Background.cpp Stecker16Background.h Franceschini17EBL.cpp Franceschini17EBL.h)

set(SOURCE_FILES
    ${CMAKE_CURRENT_BINARY_DIR}/_autogeneratedVersionInfo.h
    VersionInfo.cpp
    VersionInfo.h
    BLLac.cpp
    AA.cpp
    AA.h
    AAold.cpp
    AAold.h
    Addfunc.cpp
    Addfunc.h
    Background.cpp
    Background.h
    base64.cpp
    base64.h
    BlackHoleInjSpectra.cpp
    BlackHoleInjSpectra.h
    ClusterIROSpectrum.cpp
    ClusterIROSpectrum.h
    Concentrations.cpp
    Concentrations.h
    const.cpp
    const.h
    Coupling.cpp
    Coupling.h
    curTime.h
    CustomCouplings.cpp
    DataReader.cpp
    DataReader.h
    debug.h
    DecaySpectrum.cpp
    DecaySpectrum.h
    Dpp.cpp
    Dpp.h
    EMCrosssec.cpp
    EMCrosssec.h
    Escape.cpp
    Escape.h
    FilePreprocessor.cpp
    FilePreprocessor.h
    FilePtr.cpp
    FilePtr.h
    Fragmentation.cpp
    Fragmentation.h
    FragmentationBasedInjSpectra.cpp
    FragmentationBasedInjSpectra.h
    Franceschini08EBL.cpp
    Franceschini08EBL.h
    Function.cpp
    Function.h
    Galaxy.cpp
    Galaxy.h
    GammaSplitting.cpp
    GammaSplitting.h
    GZK2.cpp
    GZK2.h
    ICS.cpp
    ICS.h
    Init.cpp
    Init.h
    InjectionSpectra.cpp
    InjectionSpectra.h
    Inoue12IROSpectrum.cpp
    Inoue12IROSpectrum.h
    Jacobian.cpp
    Jacobian.h
    Kneiske0309IROSpectrum.cpp
    Kneiske0309IROSpectrum.h
    Kneiske1001IROSpectrum.cpp
    Kneiske1001IROSpectrum.h
    KneiskeIROSpectrum.cpp
    KneiskeIROSpectrum.h
    LEPData.cpp
    LEPData.h
    Log.cpp
    Log.h
    main.cpp
    main.h
    MassiveNeutrino.cpp
    MassiveNeutrino.h
    Medium.cpp
    Medium.h
    MPP.cpp
    MPP.h
    MuPP.cpp
    MuPP.h
    NeutronDecay.cpp
    NeutronDecay.h
    Nucleus.cpp
    Nucleus.h
    Parameters.cpp
    Parameters.h
    ParticleData.cpp
    ParticleData.h
    ParticleList.cpp
    ParticleList.h
    PhotoDisintegration.cpp
    PhotoDisintegration.h
    PowerLowInjectionSpectra.cpp
    PowerLowInjectionSpectra.h
    PP.cpp
    PP.h
    Ppp.cpp
    Ppp.h
    PrimackIROSpectrum.cpp
    PrimackIROSpectrum.h
    PropagEngine.cpp
    PropagEngine.h
    RadioBackground.cpp
    RadioBackground.h
    Ranges.cpp
    Ranges.h
    Resource.cpp
    Resource.h
    SafeOutput.h
    Sarkar1005Background.cpp
    Sarkar1005Background.h
    ScanInfoWritter.cpp
    ScanInfoWritter.h
    SecondaryDifSigma.cpp
    SecondaryDifSigma.h
    Sigma.cpp
    Sigma.h
    Source.cpp
    Source.h
    Stecker2005IROSpectrum.cpp
    Stecker2005IROSpectrum.h
    Stecker98IROSpectrum.cpp
    Stecker98IROSpectrum.h
    SvnInfo.h
    Synchrotron.cpp
    Synchrotron.h
    TableBackground.cpp
    TableBackground.h
    TableFunc.cpp
    TableFunc.h
    TableReader.cpp
    TableReader.h
    TimeZ.cpp
    TimeZ.h
    TParticle.h
    TPP.cpp
    TPP.h
    Units.cpp
    Units.h
        TableInjSpectra.cpp
        TableInjSpectra.h
    Vector.cpp
    Vector.h
    Weak.cpp
    Weak.h
    XMLSwitchFileReader.cpp
    XMLSwitchFileReader.h
    XMLUtil.cpp
    XMLUtil.h CustomInjSpectrum.cpp CustomInjSpectrum.h
        CustomBackground.cpp
        CustomBackground.h)

add_executable(propagation ${SOURCE_FILES} ${F_SOURCE_FILES})
add_executable(propag_no_f EXCLUDE_FROM_ALL ${SOURCE_FILES} ${CMAKE_CURRENT_BINARY_DIR}/disableFortran.h)

target_link_libraries(propagation gfortran ${C_LIBRARY} ${XERCES_LIBRARY} ${GSL_LIBRARY} ${GSLCBLAS_LIBRARY})
target_link_libraries(propag_no_f ${C_LIBRARY} ${XERCES_LIBRARY} ${GSL_LIBRARY} ${GSLCBLAS_LIBRARY})
target_link_libraries(Xmax ${C_LIBRARY} ${GSL_LIBRARY} ${GSLCBLAS_LIBRARY})

